(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{604:function(e,t,l){"use strict";l.r(t);var s=l(5),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,l=e._self._c||t;return l("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[l("p",[l("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lemonnuu/PicGoPictureBed/markdown/essay/0008_offset-client-scroll%E4%B8%89%E5%85%84%E5%BC%9F.jpg",alt:"0008_offset-client-scroll三兄弟"}})]),e._v(" "),l("p",[e._v("你分的清 "),l("code",[e._v("offsetWidth")]),e._v(", "),l("code",[e._v("offsetHeight")]),e._v(", "),l("code",[e._v("offsetLeft")]),e._v(", "),l("code",[e._v("offsetTop")]),e._v(", "),l("code",[e._v("clientWidth")]),e._v(", "),l("code",[e._v("clientHeight")]),e._v(", "),l("code",[e._v("clientLeft")]),e._v(", "),l("code",[e._v("clientTop")]),e._v(",\n"),l("code",[e._v("srcollHeight")]),e._v(", "),l("code",[e._v("scrollWidth")]),e._v(", "),l("code",[e._v("scrollLeft")]),e._v(", "),l("code",[e._v("scrollTop")]),e._v(" 嘛 ❓ ❓ ❓")]),e._v(" "),l("h2",{attrs:{id:"『client』"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#『client』"}},[e._v("#")]),e._v(" 『client』")]),e._v(" "),l("p",[e._v("client 家族是属于 Element 基类的一些属性")]),e._v(" "),l("p",[l("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/lemonnuu/PicGoPictureBed/markdown/essay/0009_clientWidth-clientHeight.png",alt:"0009_clientWidth-clientHeight"}})]),e._v(" "),l("h3",{attrs:{id:"element-clientwidth"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#element-clientwidth"}},[e._v("#")]),e._v(" Element.clientWidth")]),e._v(" "),l("p",[l("code",[e._v("Element.clientWidth")]),e._v(" 属性表示元素的内部宽度, 以像素计, 内联元素的 "),l("code",[e._v("clientElement")]),e._v(" 属性值为 0。\n该属性包括元素的内边距 padding, 但不包括边框 border、外边距 margin 和垂直滚动条。")]),e._v(" "),l("div",{staticClass:"custom-block warning"},[l("p",{staticClass:"title"}),l("p",[l("code",[e._v("Element.clientWidth")]),e._v(" 是一个只读属性, 且会被四舍五入为一个整数。如果需要小数值, 可使用 "),l("code",[e._v("Element.getBoundingClientRect()")]),e._v("。")])]),l("h3",{attrs:{id:"element-clientheight"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#element-clientheight"}},[e._v("#")]),e._v(" Element.clientHeight")]),e._v(" "),l("p",[l("code",[e._v("Element.clientHeight")]),e._v(" 属性表示元素内部高度, 以像素计, 内联元素的 "),l("code",[e._v("clientHeight")]),e._v(" 属性值为 0。\n该属性包括元素的内边距 padding, 但不包括边框 border、外边距 margin 和水平滚动条。")]),e._v(" "),l("div",{staticClass:"custom-block warning"},[l("p",{staticClass:"title"}),l("p",[l("code",[e._v("Element.clientHeight")]),e._v(" 是一个只读属性, 且会被四舍五入为一个整数。如果需要小数值, 可使用 "),l("code",[e._v("Element.getBoundingClientRect()")]),e._v("。")]),e._v(" "),l("p",[e._v("备注：上面的有问题。\n因为使用 "),l("code",[e._v("Element.getBoundingClientRect()")]),e._v(" 只能获取元素的 width / height, 但是这个值是 offsetWidth / offsetHeight, 包括边框的长度,\n所以不能获取 clientWidth / clientHeight。")])]),l("h3",{attrs:{id:"element-clientleft"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#element-clientleft"}},[e._v("#")]),e._v(" Element.clientLeft")]),e._v(" "),l("p",[l("code",[e._v("Element.clientLeft")]),e._v(" 属性表示元素左边框的宽度, 以像素计, 且包括左滚动条, 是一个只读属性。")]),e._v(" "),l("div",{staticClass:"custom-block warning"},[l("p",{staticClass:"title"}),l("p",[e._v("当元素的文本方向是从右向左(RTL, right-to-left), 并且内容溢出就会形成左滚动条。")])]),l("h3",{attrs:{id:"element-clienttop"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#element-clienttop"}},[e._v("#")]),e._v(" Element.clientTop")]),e._v(" "),l("p",[l("code",[e._v("Element.clientTop")]),e._v(" 属性表示元素顶部边框的宽度, 以像素计, 是一个只读属性。")]),e._v(" "),l("h2",{attrs:{id:"『scroll』"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#『scroll』"}},[e._v("#")]),e._v(" 『scroll』")]),e._v(" "),l("h3",{attrs:{id:"element-scrollwidth"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#element-scrollwidth"}},[e._v("#")]),e._v(" Element.scrollWidth")]),e._v(" "),l("p",[l("code",[e._v("Element.scrollWidth")]),e._v(" 属性在未出现水平滚动条时等于 "),l("code",[e._v("clientWidth")]),e._v(", 即为出现水平滚动条的最小宽度。\n当含有水平滚动条时, 为元素内容的宽度, 包括由于 overflow 溢出在屏幕上不可见的内容。")]),e._v(" "),l("div",{staticClass:"custom-block warning"},[l("p",{staticClass:"title"}),l("p",[l("code",[e._v("Element.scrollWidth")]),e._v(" 是一个只读属性, 且会被四舍五入为一个整数。如果需要小数值, 可使用 "),l("code",[e._v("Element.getBoundingClientRect()")]),e._v("。")])]),l("h3",{attrs:{id:"element-scrollheight"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#element-scrollheight"}},[e._v("#")]),e._v(" Element.scrollHeight")]),e._v(" "),l("p",[l("code",[e._v("Element.scrollHeight")]),e._v(" 属性在未出现垂直滚动条时等于 "),l("code",[e._v("clientHeight")]),e._v(", 即为出现垂直滚动条的最小高度。\n当含有垂直滚动条时, 为元素内容的高度, 包括由于 overflow 溢出在屏幕上不可见的内容。")]),e._v(" "),l("div",{staticClass:"custom-block warning"},[l("p",{staticClass:"title"}),l("p",[l("code",[e._v("Element.scrollHeight")]),e._v(" 是一个只读属性, 且会被四舍五入为一个整数。如果需要小数值, 可使用 "),l("code",[e._v("Element.getBoundingClientRect()")]),e._v("。")])]),l("h3",{attrs:{id:"element-scrollleft"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#element-scrollleft"}},[e._v("#")]),e._v(" Element.scrollLeft")]),e._v(" "),l("p",[l("code",[e._v("Element.scrollLeft")]),e._v(" 属性可以读取或设置元素滚动条到元素左边的距离。")]),e._v(" "),l("div",{staticClass:"custom-block warning"},[l("p",{staticClass:"title"}),l("p",[e._v("注意如果这个元素的内容排列方向 (direction) 是 rtl (right-to-left), 那么滚动条会位于最右侧(内容开始处),\n并且 "),l("code",[e._v("scrollLeft")]),e._v(" 值为 0。此时, 当从右到左拖动滚动条时, scrollLeft 会从 0 变为负数。")])]),l("div",{staticClass:"custom-block danger"},[l("p",{staticClass:"title"}),l("p",[l("code",[e._v("Element.scrollLeft")]),e._v(" 可以是一个小数。")])]),l("h3",{attrs:{id:"element-scrolltop"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#element-scrolltop"}},[e._v("#")]),e._v(" Element.scrollTop")]),e._v(" "),l("p",[l("code",[e._v("Element.scrollTop")]),e._v(" 属性可以获取或设置一个元素的内容垂直滚动的像素数。")]),e._v(" "),l("p",[e._v("一个元素的 "),l("code",[e._v("scrollTop")]),e._v(" 值是这个元素的内容顶部 (卷起来的) 到它视口可见内容 (的顶部) 的距离的度量。\n当一个元素的内容没有产生垂直方向的滚动条, 那么它的 "),l("code",[e._v("scrollTop")]),e._v(" 值为 0。")]),e._v(" "),l("div",{staticClass:"custom-block danger"},[l("p",{staticClass:"title"}),l("p",[l("code",[e._v("Element.scrollTop")]),e._v(" 可以是一个小数。")])]),l("h2",{attrs:{id:"『offset』"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#『offset』"}},[e._v("#")]),e._v(" 『offset』")]),e._v(" "),l("h3",{attrs:{id:"htmlelement-offsetwidth"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#htmlelement-offsetwidth"}},[e._v("#")]),e._v(" HTMLElement.offsetWidth")]),e._v(" "),l("p",[l("code",[e._v("HTMLElement.offsetWidth")]),e._v(" 是一个只读属性, 返回一个元素的布局宽度。\n一个典型的 offsetWidth 是包含元素的边框(border)、水平线上的内边距(padding)、垂直方向的滚动条(scrollbar, 如果存在的话)、以及 CSS 设置的宽度(width)。")]),e._v(" "),l("div",{staticClass:"custom-block warning"},[l("p",{staticClass:"title"}),l("p",[l("code",[e._v("HTMLElement.offsetWidth")]),e._v(" 会四舍五入为一个整数, 是一个只读属性。如果需要小数值, 可使用 "),l("code",[e._v("Element.getBoundingClientRect()")]),e._v("。")])]),l("h3",{attrs:{id:"htmlelement-offsetheight"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#htmlelement-offsetheight"}},[e._v("#")]),e._v(" HTMLElement.offsetHeight")]),e._v(" "),l("p",[l("code",[e._v("HTMLElement.offsetHeight")]),e._v(" 是一个只读属性, 它返回该元素的像素高度, 高度包含该元素的垂直内边距和边框, 且是一个整数。不含伪类元素的高度。")]),e._v(" "),l("h3",{attrs:{id:"htmlelement-offsetleft"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#htmlelement-offsetleft"}},[e._v("#")]),e._v(" HTMLElement.offsetLeft")]),e._v(" "),l("p",[l("code",[e._v("HTMLElement.offsetLeft")]),e._v(" 是一个只读属性, 返回当前元素左上角相对于 "),l("code",[e._v("HTMLElement.offsetParent")]),e._v(" 节点的左边界偏移的像素值。")]),e._v(" "),l("p",[e._v("对于块级元素来说, "),l("code",[e._v("offsetTop")]),e._v("、"),l("code",[e._v("offsetLeft")]),e._v("、"),l("code",[e._v("offsetWidth")]),e._v(" 及 "),l("code",[e._v("offsetHeight")]),e._v(" 描述了元素相对于 "),l("code",[e._v("offsetParent")]),e._v(" 的边界框。")]),e._v(" "),l("p",[e._v("然而, 对于可被截断到下一行的行内元素 (如 span) 来说, "),l("code",[e._v("offsetTop")]),e._v(" 和 "),l("code",[e._v("offsetLeft")]),e._v(" 描述的是第一个边界框的位置(使用 "),l("code",[e._v("Element.getClientRects()")]),e._v("\n来获取其位置)。因此, 使用 "),l("code",[e._v("offsetLeft")]),e._v("、"),l("code",[e._v("offsetTop")]),e._v("、"),l("code",[e._v("offsetWidth")]),e._v("、"),l("code",[e._v("offsetHeight")]),e._v(" 来对应 left、top、width 和 height 的一个盒子将不会是\n文本容器 span 的盒子边界。")]),e._v(" "),l("h3",{attrs:{id:"htmlelement-offsettop"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#htmlelement-offsettop"}},[e._v("#")]),e._v(" HTMLElement.offsetTop")]),e._v(" "),l("p",[l("code",[e._v("HTMLElement.offsetTop")]),e._v(" 为只读属性, 它返回当前元素相对于其 "),l("code",[e._v("offsetParent")]),e._v(" 元素顶部内边框的距离。")]),e._v(" "),l("h3",{attrs:{id:"htmlelement-offsetparent"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#htmlelement-offsetparent"}},[e._v("#")]),e._v(" HTMLElement.offsetParent")]),e._v(" "),l("p",[l("code",[e._v("HTMLElement.offsetParent")]),e._v(" 是一个只读属性, 返回一个指向最近的(指包含层级上的最近)包含该元素的定位元素或者最近的 "),l("code",[e._v("table")]),e._v("、"),l("code",[e._v("td")]),e._v("、"),l("code",[e._v("th")]),e._v("、"),l("code",[e._v("body")]),e._v(" 元素。\n当元素的 "),l("code",[e._v("style.display")]),e._v(' 设置为 "none" 时, '),l("code",[e._v("offsetParent")]),e._v(" 返回 "),l("code",[e._v("null")]),e._v("。")])])}),[],!1,null,null,null);t.default=o.exports}}]);